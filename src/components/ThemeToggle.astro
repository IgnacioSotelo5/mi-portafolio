---
import Dark from "./icons/Dark.astro";
import Light from "./icons/Light.astro";
import System from "./icons/System.astro";

const THEMES = ['Light', 'Dark', 'System']
---

<div class="relative mx-1">
    <button
    transition:persist
    id="theme-toggle-btn"
    class="appearance-none border-none flex hover:scale-125 transition">
        <span class="sr-only">
            Elige tu tema preferido
        </span>
        <Light id="light" class="absolute themeToggleIcon text-yellow-300" />
        <Dark id="dark" class="themeToggleIcon text-slate-300" />
        <System id="system" class="absolute themeToggleIcon" />
    </button>
    <div 
    transition:persist
    id="theme-toggle-menu"
    class="absolute hidden scale-80 top-9 right-0 text-sm p-1 min-w-32 rounded-md border border-gray-100 bg-white/90 dark:bg-slate-800/95 dark:border-slate-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md">
        <ul >
            {
                THEMES.map(theme => (
                    <li class="themes-menu-option px-2 py-1.5 cursor-default hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm">
                        {theme}
                    </li>
                ))
            }
        </ul>
    </div>
</div>
<style>
    #theme-toggle-menu.open{
        display: inline;
        animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
    }

    .themeToggleIcon{
        @apply size-6 transition-all
    }

    @keyframes scale-up-center {
        from{
            transform: scale(0.9);
            opacity: 0;
        }

        to{
            transform: scale(1);
            opacity: 1;
        }
    }
</style>

<script is:inline>

    let remove = null
    const matchMedia = window.matchMedia('(prefers-color-scheme: dark)')
    const themeMenu = document.getElementById('theme-toggle-menu') 
    
    const getThemePreference = () => {
        if(typeof localStorage !== 'undefined'){
            return localStorage.getItem('theme') ?? 'system'
        }

        return window.matchMedia('(prefers-color-scheme: dark)') ? 'dark' : 'light'
    }

    const updateIcon = (themePreference) => {        
        document.querySelectorAll('.themeToggleIcon').forEach((icon) => {
            console.log(icon);
            
            icon.style.scale = icon.id === themePreference ? '1' : '0'
        })
    }

    const updateTheme = () => {
        if(remove !== null){
            remove()
        }

        matchMedia.addEventListener('change', updateTheme)

        remove = () => {
            matchMedia.removeEventListener('change', updateTheme)
        }

        const themePreference = getThemePreference()
        const isDark = themePreference === 'dark' || (themePreference === 'system' && matchMedia.matches)
        updateIcon(themePreference)
        document.documentElement.classList[isDark ? 'add' : 'remove']('dark')

    }
    
    updateTheme()

    document.addEventListener('click', () => {
        themeMenu.classList.remove('open')
    })

    document.getElementById('theme-toggle-btn').addEventListener('click', (e) => {
        e.stopPropagation()
        const isClosed = !themeMenu.classList.contains('open')
        themeMenu.classList[isClosed ? 'add' : 'remove']('open')
    })

    document.querySelectorAll('.themes-menu-option').forEach(element => {
        element.addEventListener('click', (e) => {
            localStorage.setItem('theme', e.target.innerText.toLowerCase().trim())
            updateTheme()
        })
        
    })

    document.addEventListener('astro:after-swap', () => {
        updateTheme()
        window.scrollTo({
            top: 0,
            left: 0,
            behavior: 'instant'
        })
    })

</script>